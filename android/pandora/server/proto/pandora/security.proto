syntax = "proto3";

option java_outer_classname = "SecurityProto";

import "pandora/host.proto";
import "google/protobuf/empty.proto";

package pandora;

service Security {
  // Begin pairing asynchronously with a device. Responses will be streamed
  // using the OnPairing rpc.
  rpc Pair(PairRequest) returns (google.protobuf.Empty);
  // Acknowledge a pairing request and continue pairing
  // TODO(240276298) remove, since PairingEventAnswers supersede these
  rpc ProvidePairingConfirmation(PairingConfirmationRequest)
      returns (google.protobuf.Empty);
  // Listen to pairing events.
  // This is handled independently from connections for several reasons:
  // - Pairing can be triggered at any time and multiple times during the
  //   lifetime of a connection (this also explains why this is a stream).
  // - In BR/EDR, the specification allows for a device to authenticate before
  //   connecting when in security mode 3 (link level enforced security).
  rpc OnPairing(stream PairingEventAnswer) returns (stream PairingEvent);
  // Remove pairing.
  rpc DeletePairing(DeletePairingRequest) returns (DeletePairingResponse);
}

message PairRequest {
    Connection connection = 1;
}

message PairingConfirmationRequest {
    Connection connection = 1;
    bool pairing_confirmation_value = 2;
}

message PairingEvent {
    // Peer Bluetooth Device Address as array of 6 bytes.
    bytes address = 1;
    // Authentication method used for this pairing event
    oneof method {
      // "Just Works" Secure Simple Pairing association
      // model. Confirmation is automatic.
      google.protobuf.Empty just_works = 2;
      // Numeric Comparison Secure Simple Pairing association
      // model. Confirmation is required.
      uint32 numeric_comparison = 3;
      // Passkey Entry Secure Simple Pairing association model.
      // Passkey is shown to the user.
      // The peer device receives a Passkey Entry request.
      bytes passkey_entry_notification = 4;
      // Passkey Entry Secure Simple Pairing association model.
      // Passkey is typed by the user.
      google.protobuf.Empty passkey_entry_request = 5;
      // Legacy PIN Pairing.
      // A PIN Code is typed by the user.
      google.protobuf.Empty pin_code = 6;
    }
}

message PairingEventAnswer {
    // Received pairing event.
    PairingEvent event = 1;
    // Answer when needed to the pairing event method.
    oneof answer {
      // Numeric Comparison confirmation.
      // Used when pairing event method is `numeric_comparison`.
      bool confirm = 2;
      // Passkey typed by the user.
      // Used when pairing event method is `passkey_entry_request`.
      bytes passkey = 3;
      // Pin typed by the user.
      // Used when pairing event method is `pin_code`.
      uint32 pin = 4;
    };
}

// Request of the `DeletePairing` method.
message DeletePairingRequest {
    // Local Bluetooth Device Address as array of 6 bytes.
    bytes address = 1;
}

// Response of the `DeletePairing` method.
message DeletePairingResponse {}
